//Basic class with no constructor nor body
class A
//class with a member property
class A{
	val string = "Hello world!"
}
//Class with a member function
class A{
	fun f{
		println("Hello world!")
	}
}
//Class with constructor parameters
class A(string: String)
//Class with constructor member property
class A(val string: String)
//Class with constructor member property and member function
class A(val string: String){
	fun f{
		println(this.string)
	}
}
//Class with constructor and constructor body
class A(string: String){
	init{
		println(this.string)
	}
}
//Open class with open member property overridden
open class A{
	open val string = "Hello world!"
}
class B: A(){
	override string = "Goodbye everybody, I'll remember you all in therapy!"
}
//Abstract class with abstract member property and concrete implementation
abstract class A{
	abstract val string: String
}
class B: A(){
	impl val string = "Hello world!"
}
//Class with abstract type implementation
type A{
	val string: String
}
class B: A(){
	impl val string = "Hello world!"
}
//Class with dropper
class A{
	drop{
		println("Dropping instance of A from memory")
	}
}